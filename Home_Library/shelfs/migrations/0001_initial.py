# Generated by Django 3.2.4 on 2021-07-06 19:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=30, null=True)),
                ('surname', models.CharField(max_length=30, null=True)),
                ('birthday', models.DateField(null=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='photos/users/%Y/%m/%d/')),
                ('description', models.CharField(blank=True, max_length=400, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True)),
                ('surname', models.CharField(max_length=30, null=True)),
                ('birthday', models.DateField(null=True)),
                ('is_dead', models.BooleanField(default=False)),
                ('death', models.DateField(null=True)),
                ('plc_of_brth', models.CharField(max_length=30, null=True)),
                ('plc_of_dth', models.CharField(max_length=30, null=True)),
                ('nationality', django_countries.fields.CountryField(max_length=2)),
                ('file', models.FileField(blank=True, null=True, upload_to='photos/users/%Y/%m/%d/')),
                ('description', models.CharField(blank=True, max_length=400, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('description', models.CharField(blank=True, max_length=400, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, unique=True)),
                ('isbn', models.CharField(max_length=13)),
                ('file', models.FileField(blank=True, null=True, upload_to='photos/items/%Y/%m/%d/')),
                ('description', models.CharField(blank=True, max_length=400, null=True)),
                ('cathegory', models.IntegerField(choices=[(1, 'Book'), (2, 'eBook'), (3, 'Audiobook'), (4, 'Moovie'), (5, 'PC Game'), (6, 'PS Game'), (7, 'N Game'), (8, 'Audio CD'), (9, 'Other')])),
                ('year', models.IntegerField(null=True)),
                ('volume', models.IntegerField(null=True)),
                ('notice', models.CharField(max_length=80, null=True)),
                ('edition', models.CharField(max_length=80, null=True)),
                ('language', models.IntegerField(choices=[(1, 'Polish'), (2, 'English'), (3, 'German'), (4, 'French'), (5, 'Other')])),
                ('author', models.ManyToManyField(to='shelfs.Author')),
                ('genre', models.ManyToManyField(to='shelfs.Genre')),
            ],
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('city', models.CharField(max_length=128, null=True)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('file', models.FileField(blank=True, null=True, upload_to='photos/publishers/%Y/%m/%d/')),
                ('description', models.CharField(blank=True, max_length=400, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Serie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('world', models.CharField(max_length=128)),
                ('nr_of_volumes', models.IntegerField(default=1)),
                ('file', models.FileField(blank=True, null=True, upload_to='photos/series/%Y/%m/%d/')),
                ('description', models.CharField(blank=True, max_length=400, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_owner', models.BooleanField(default=False)),
                ('is_editor', models.BooleanField(default=False)),
                ('favourite', models.BooleanField(default=False)),
                ('nr_of_copies', models.IntegerField(default=1)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_items', to='shelfs.item')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_items', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Rate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.IntegerField(choices=[(1, 'Poor'), (2, 'Avarage'), (3, 'Good'), (4, 'Very good'), (5, 'Outstanding'), (6, 'Briliant')])),
                ('description', models.CharField(blank=True, max_length=400, null=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rates', to='shelfs.item')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rates', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Loans',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_loan', models.DateField(default=django.utils.timezone.now)),
                ('date_of_return', models.DateField(null=True)),
                ('in_loans', models.BooleanField(default=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='photos/loans/%Y/%m/%d/')),
                ('description', models.CharField(blank=True, max_length=400, null=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loans', to='shelfs.item')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loans', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='publisher',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='shelfs.publisher'),
        ),
        migrations.AddField(
            model_name='item',
            name='serie',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='shelfs.serie'),
        ),
        migrations.AddField(
            model_name='item',
            name='user',
            field=models.ManyToManyField(related_name='items', through='shelfs.UserItem', to=settings.AUTH_USER_MODEL),
        ),
    ]
